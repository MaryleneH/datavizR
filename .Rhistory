knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
kable(mtcars[1:5, ], "html") %>%
kable_styling("striped") %>%
row_spec(1, color = "red") %>%
save_kable("inst/test.pdf")
library(kableExtra)
kable(mtcars[1:5, ], "html") %>%
kable_styling("striped") %>%
row_spec(1, color = "red") %>%
save_kable("inst/test.pdf")
library(kableExtra)
kable(mtcars[1:5, ], "html") %>%
kable_styling("striped") %>%
row_spec(1, color = "red") %>%
save_kable("test.pdf")
kable(mtcars, "latex") %>%
kable_styling(latex_options = "striped") %>%
save_kable("test.png")
install.packages("magick")
install.packages("magick")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
kable(mtcars[1:5, ], "html") %>%
kable_styling("striped") %>%
row_spec(1, color = "red") %>%
save_kable("test.pdf")
kable(mtcars, "latex") %>%
kable_styling(latex_options = "striped") %>%
save_kable("test.png")
library(kableExtra)
kable(mtcars[1:5, ], "html") %>%
kable_styling("striped") %>%
row_spec(1, color = "red") %>%
save_kable("test.pdf")
#
# kable(mtcars, "latex") %>%
#   kable_styling(latex_options = "striped") %>%
#   save_kable("test.png")
library(kableExtra)
kable(mtcars[1:5, ], "html") %>%
kable_styling("striped") %>%
row_spec(1, color = "red") %>%
save_kable("test.pdf")
#
# kable(mtcars, "latex") %>%
#   kable_styling(latex_options = "striped") %>%
#   save_kable("test.png")
library(kableExtra)
kable(mtcars[1:5, ], "html") %>%
kable_styling("striped") %>%
row_spec(1, color = "red")
#
# kable(mtcars, "latex") %>%
#   kable_styling(latex_options = "striped") %>%
#   save_kable("test.png")
library(learnr)
install.packages("wordcloud")
install.packages("MASS")
library(ggplot2)
cars_table <- table(mtcars$mpg)
head(cars_table)
str(mtcars)
library(MASS)
str(MASS)
str(Cars93)
mfr_table <- table(Cars93$Manufacturer)
str(anscombe)
?anscombe
getwd()
getwd()
install.packages("xaringan")
#   <font size="6">
#
#   - Langage `R` Base ?
#
#   - Le tidyverse ?
#
#   </font>
#   </div>
#
#   </div>
install.packages("insuranceData")
# Load the insuranceData package
library(insuranceData)
# Use the data() function to load the dataCar data frame
data(dataCar)
# Load the tabplot package
suppressPackageStartupMessages(library(tabplot))
install.packages("tabplot")
# Load the tabplot package
suppressPackageStartupMessages(library(tabplot))
# Generate the default tableplot() display
tableplot(dataCar)
install.packages("tabplot")
install.packages("lattice")
getwd()
str(airquality)
library(lattice)
# Create scatterplot
xyplot(Ozone ~ Temp, data = airquality,
# Add main label
main = "Environmental conditions in New York City (1973)",
# Add axis labels
xlab = "Temperature (Fahrenheit)",
ylab = "Ozone (ppb)")
# Create scatterplot
xyplot(Ozone ~ Temp, data = airquality,
# Add main label
main = "Environmental conditions in New York City (1973)",
# Add axis labels
xlab = "Temperature (Fahrenheit)",
ylab = "Ozone (ppb)", abline = c(0,1))
# Create scatterplot
xyplot(Ozone ~ Temp, data = airquality,
# Add main label
main = "Environmental conditions in New York City (1973)",
# Add axis labels
xlab = "Temperature (Fahrenheit)",
ylab = "Ozone (ppb)", abline = c(1,0))
# Create scatterplot
xyplot(Ozone ~ Temp, data = airquality,
# Add main label
main = "Environmental conditions in New York City (1973)",
# Add axis labels
xlab = "Temperature (Fahrenheit)",
ylab = "Ozone (ppb)", abline = c(0,1))
?xyplot
# Create a density plot
densityplot(~ Ozone, data = airquality,
# Choose how raw data is shown
plot.points = FALSE)
# Create a density plot
densityplot(~ Ozone, data = airquality,
# Choose how raw data is shown
plot.points = T)
# Create a density plot
densityplot(~ Ozone, data = airquality,
# Choose how raw data is shown
plot.points = "jitter")
# 'USCancerRates' is pre-loaded
str(USCancerRates)
install.packages("latticeExtra")
library(lattice)
library(latticeExtra)
# USCancerRates has been pre-loaded
str(USCancerRates)
# Create a density plot
densityplot(~rate.male + rate.female,
data = USCancerRates,
# Set value of 'outer'
outer = FALSE,
# Add x-axis label
xlab = "Rate (per 100,000)",
# Add a legend
auto.key = TRUE,
plot.points = FALSE,
ref = TRUE)
# Create a density plot
densityplot(~rate.male + rate.female,
data = USCancerRates,
# Set value of 'outer'
outer = TRUE,
# Add x-axis label
xlab = "Rate (per 100,000)",
# Add a legend
auto.key = TRUE,
plot.points = FALSE,
ref = TRUE)
str(airquality)
xyplot(Ozone ~ Temp, airquality, groups = Month,
# Complete the legend spec
auto.key = list(space = "right",
title = "Month",
text = month.name[5:9]))
str(USCancerRates)
bwplot(state ~ rate.male + rate.female,
data = USCancerRates,
outer = TRUE,
# Add a label for the x-axis
xlab = "Rate (per 100,000)",
# Add strip labels
strip = strip.custom(c("Male","Female")))
library(ggplot2)
xyplot(Petal.Length ~ Petal.Width | Species, iris,
strip = strip.custom(style = 4))
xyplot(Petal.Length ~ Petal.Width | Species, iris,
strip = FALSE,
strip.left = strip.custom(style = 4, horizontal = FALSE))
str(mtcars)
install.packages("knitr")
install.packages("knitr")
library(latticeExtra)
knitr::opts_chunk$set(echo = FALSE)
library(htmltools)
library(dplyr)
library(tibble)
library(ggplot2)
library(plotly)
library(lattice)
library(latticeExtra)
options(tibble.print_max = 15)
options(tibble.print_min = 6)
tplot <- densityplot(~rate.male + rate.female,
data = USCancerRates, outer = T)
class(tplot)
str(USCancerRates)
tplot <- densityplot(~rate.male + rate.female | state,
data = USCancerRates, outer = T)
summary(tplot)[[]]
tplot <- densityplot(~rate.male + rate.female | state,
data = USCancerRates, outer = T)
summary(tplot)
summary(tplot)[[]]
tplot <- densityplot(~rate.male + rate.female | state,
data = USCancerRates, outer = T)
summary(tplot)
summary(tplot)[[2]]
tplot <- densityplot(~rate.male + rate.female | state,
data = USCancerRates, outer = T)
summary(tplot)[[2]]
tplot <- densityplot(~rate.male + rate.female | state,
data = USCancerRates, outer = T)
head(summary(tplot)[[2]])
plot(ChickWeight)
?ChickWeight
knitr::opts_chunk$set(echo = FALSE)
library(htmltools)
library(dplyr)
library(tibble)
library(ggplot2)
library(plotly)
library(lattice)
library(latticeExtra)
options(tibble.print_max = 15)
options(tibble.print_min = 6)
library(MASS)
plot(Boston$rad, Boston$tax, main ="Sunflowerplot")
library(MASS)
?Boston
Cars93
install.packages("corrplot")
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
library(MASS)
library(htmltools)
library(dplyr)
library(tibble)
library(ggplot2)
library(plotly)
library(lattice)
library(latticeExtra)
options(tibble.print_max = 15)
options(tibble.print_min = 6)
correlation <- cor(mtcars)
correlation <- cor(mtcars)
library(corrplot)
corrplot(correlation,method = "ellipse")
correlation <- cor(mtcars)
library(corrplot)
corrplot(correlation,method = "ellipse")
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(ggplot2)
mat_cor <- cor(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
chart_link
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter-modes")
tf <- tempfile(fileext = ".xlsx")
f <- download.file("https://www.impots.gouv.fr/portail/files/media/stats/isfcom2017.xlsx",tf)
table_test <- read_excel(tf, sheet = 2, skip = 1) %>%
arrange(desc(`nombre de redevables`))
library(dplyr)
table_test <- read_excel(tf, sheet = 2, skip = 1) %>%
arrange(desc(`nombre de redevables`))
library(readxl)
table_test <- read_excel(tf, sheet = 2, skip = 1) %>%
arrange(desc(`nombre de redevables`))
tf
table_test <- read_excel(f, sheet = 2, skip = 1) %>%
arrange(desc(`nombre de redevables`))
f
install.packages("mapview")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
ggplot(mtcars)+
geom_point(aes(x=mpg,y=drv))
str(mtcars)
ggplot(mtcars)+
geom_point(aes(x=mpg,y=disp))
ggplot(mtcars)+
geom_point(aes(x=mpg,y=disp,color = factor(cyl)))
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
library(ggplot2)
par(mfrow = c(1,2))
plot(iris)
plot(iris, pch = 20, col = iris$Species)
plot(iris)
plot(iris, pch = 20, col = iris$Species)
par(mfrow = c(1,2))
par(mfrow = c(1,2))
plot(iris)
plot(iris, pch = 20, col = iris$Species)
par(mfrow = c(1,2))
plot(iris)
plot(iris, pch = 20, col = iris$Species)
old_options <- par(mfrow = c(2, 3))
plot(iris)
plot(iris, pch = 20, col = iris$Species)
par(old_options)
old_options <- par(mfrow = c(1, 2))
plot(iris)
plot(iris, pch = 20, col = iris$Species)
par(old_options)
old_options <- par(mfrow = c(1, 2))
plot(iris)
plot(mtcars)
par(old_options)
old_options <- par(mfrow = c(1, 2))
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(mtcars$mpg,mtcars$disp)
par(old_options)
install.packages("corrr")
install.packages("corrr")
library("rmarkdown", lib.loc="~/R/win-library/3.5")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("ggplot2")
install.packages("corrplot")
install.packages("corrr")
library(ggplot2)
library(corrr)
library(dplyr)
mtcars %>%
correlate() %>%
focus(mpg:drat, mirror = TRUE) %>%
network_plot()
sessionInfo()
install.packages(c("corrr", "dplyr", "ggplot2", "plotly"))
install.packages("knitr")
# install.packages("remotes")
remotes::install_github("Thinkr-open/golem")
install.packages("remotes")
# install.packages("remotes")
remotes::install_github("Thinkr-open/golem")
install.packages("rstudioapi")
install.packages("learnr")
install.packages("corrplot")
install.packages("latticeExtra")
install.packages("rwhatsapp")
library(ggplot2)
plot(mtcars)
plot(mtcars, col = "blue")
hist(mtcars$wt)
hist(mtcars$wt, col = "gray")
object <- density(mtcars$wt)
plot(object)
hist(mtcars$wt)
line(object)
hist(mtcars$wt)
line(object)
hist(mtcars$wt)
lines(object)
y <- rnorm(100)
histogram(y, type="density",
panel=function(...){
panel.histogram(...)
panel.mathdensity(dmath = dnorm, args = list(mean=mean(y), sd=sd(y)),
n = 250,  identifier = "mathdensity", col="red", lwd=2)
}
)
library(lattice)
y <- rnorm(100)
histogram(y, type="density",
panel=function(...){
panel.histogram(...)
panel.mathdensity(dmath = dnorm, args = list(mean=mean(y), sd=sd(y)),
n = 250,  identifier = "mathdensity", col="red", lwd=2)
}
)
table(mtcars$drv)
barplot(table(mtcars$drv))
str(mtcars)
barplot(table(mtcars$carb))
install.packages("trellisjscope")
shiny::runApp('demo')
library(latticeExtra)
str(USCancerRates)
head(USCancerRates)
vu <- data("USCancerRates")
vu <- data(USCancerRates)
vu <- data(USCancerRates)
plot(vu)
data(USCancerRates)
force(USCancerRates)
str(USCancerRates)
xyplot(rate.female~rate.male, data = USCancerRates
grid = TRUE, abline(lm(rate.female~rate.male, data = USCancerRates)))
xyplot(rate.female~rate.male, data = USCancerRates,
grid = TRUE, abline(lm(rate.female~rate.male, data = USCancerRates)))
xyplot(rate.female~rate.male, data = USCancerRates,
grid = TRUE, abline(lm(rate.female~rate.male, data = USCancerRates)))
lm(rate.female~rate.male, data = USCancerRates)
a <- lm(rate.female~rate.male, data = USCancerRates)
xyplot(rate.female~rate.male, data = USCancerRates,
grid = TRUE, abline(a[2],a[1]))
a[1]
a$coefficients[2]
xyplot(rate.female~rate.male, data = USCancerRates,
grid = TRUE, abline(a$coefficients[2],a$coefficients[1]))
xyplot(rate.female~rate.male, data = USCancerRates,
grid = TRUE, abline(a$coefficients[1],a$coefficients[2]))
xyplot(rate.female~rate.male, data = USCancerRates,
)
# Use the 'airquality' dataset
str(airquality)
# Create the histogram
histogram(~ Ozone, data = airquality,
# Specify number of bins
nint = 15,
# Specify quantity displayed on y-axis
type = "count")
# Create the histogram
histogram(~ Ozone, data = airquality,
# Specify number of bins
nint = 15,
# Specify quantity displayed on y-axis
type = "density")
# Create a density plot
densityplot(~ Ozone, data = airquality,
# Choose how raw data is shown
plot.points = "jitter")
bwplot(state~rate.male, data = USCancerRates)
library(dplyr)
USCancerRates <- mutate(USCancerRates,
states_ordered =
reorder(state,rate.male, na.rm = T))
bwplot(state_ordered~rate.male, data = USCancerRates)
bwplot(states_ordered~rate.male, data = USCancerRates)
